"#############################################################################
" .vimrc
" Author: botello <botello@gmail.com>
" Source: https://github.com/botello/dotfiles
"#############################################################################

"--------------------------------------------------------------------------
" General settings
"--------------------------------------------------------------------------
"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
set nocompatible
"behave mswin
filetype off
set t_BE=

"--------------------------------------------------------------------------
" Fixes for specific terminals
"--------------------------------------------------------------------------
if
    \$COLORTERM == '1' ||
    \$COLORTERM == 'gnome-terminal' ||
    \$COLORTERM == 'xfce4-terminal'
    set t_Co=256
    let base16colorspace=256
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

"--------------------------------------------------------------------------
" Vundle
"--------------------------------------------------------------------------
set rtp+=$HOME/dotfiles/vim/bundle/Vundle.vim/
let $GIT_SSL_NO_VERIFY = 'true'

call vundle#begin('$HOME/dotfiles/vim/bundle')

Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'easymotion/vim-easymotion'

Plugin 'chriskempson/base16-vim'
Plugin 'craigemery/vim-autotag'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/syntastic'
Plugin 'airblade/vim-gitgutter'

Plugin 'vhda/verilog_systemverilog.vim'
Plugin 'vim-scripts/verilog_emacsauto.vim'

Plugin 'bjoernd/vim-syntax-simics'
Plugin 'tpope/vim-markdown'

Plugin 'kergoth/vim-bitbake'

call vundle#end()

filetype plugin indent on
"set autoindent  " always set autoindenting on

"--------------------------------------------------------------------------
" Settings
"--------------------------------------------------------------------------
set encoding=utf-8
set fileformats=unix,dos,mac
set laststatus=2
set cmdheight=2
set backspace=indent,eol,start  " same as 2
set autochdir
set history=1000
set shortmess=atI
set report=0
set showcmd
set hidden
set completeopt=longest,menu " for omnipotent

set number
"set textwidth=78  " auto break lines
set nowrap
set linebreak
set breakindent
set showbreak=\\\\\
set hlsearch
set incsearch
set ignorecase
set smartcase
set nolazyredraw
set scrolloff=5
set wildignore=.svn,CVS,.git,.hg,*.o,*.so,*.obj,*.swp,*.jpg,*.png,*.gif
set wildmenu
set wildmode=list:longest,full

" Folding
"set foldmethod=marker
set foldmethod=indent
set foldlevel=0
set foldnestmax=6
set foldlevelstart=20
set foldcolumn=2
set nofoldenable

nnoremap <space> za
vnoremap <space> zf

" Spaces instead of tabs
let tabsize=4
execute "set tabstop=".tabsize
execute "set shiftwidth=".tabsize
execute "set softtabstop=".tabsize
set expandtab

" Max syntax column for loooong lines
set synmaxcol=200

" Enable spelling
"set spell spelllang=en_us
"set complete+=kspell

" Highlight trailing spaces
match Visual "\s\+$"

" Search for (visual) selected text using mapped '*' and '#'.
vnoremap <silent> * :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy/<C-R><C-R>=substitute(
        \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy?<C-R><C-R>=substitute(
        \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

" Tag file location
set tags=tags;
set tags+=.tags;
set tags+=..\tags;
set tags+=..\..\tags;
set tags+=..\..\..\tags;
set tags+=..\..\..\..\tags;
set tags+=..\..\..\..\..\tags;
set tags+=..\..\..\..\..\..\tags;
let g:autoTagsFile=".tags"

" Remember cursor position between vim sessions
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Trailing whitespace
set nolist
set listchars=tab:¬ª¬∑,trail:¬∑,extends:¬ª,precedes:¬´,eol:¬∂
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * execute "set list"
    au InsertLeave * execute "set nolist"
augroup END

" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    "au WinLeave * set nocursorcolumn
    "au WinEnter * set cursorcolumn
    "au InsertEnter * set nocursorcolumn
    "au InsertLeave * set cursorcolumn
    au WinLeave * set nocursorline
    au WinEnter * set cursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
augroup END

" Maping next/prev buffer to <TAB> and <SHIFT-TAB> key in cmd mode
nnoremap <silent> <Tab> :bnext<cr>
nnoremap <silent> <S-Tab> :bprev<cr>

" Maping next/prev buffer to <ALT-l> and <ALT-h> key in cmd mode
"execute "set <A-h>=\eh"
"execute "set <A-l>=\el"
"nnoremap <silent> <A-h> :bprev<cr>
"nnoremap <silent> <A-l> :bnext<cr>

nnoremap <silent> <F12> :TlistToggle<cr>

" Disable backup file, enable read modified files
set nobackup
set nowarn
set noswapfile
set autoread

" Disable all sounds and visual bells
set noerrorbells
set visualbell
set t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Smarter j and k navigation. Display line movements unless
" preceded by a count
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Grepping
nnoremap <F3> :execute "grep -srnwI --exclude-dir=.git --exclude=tags . -e " . expand("<cword>") . " " <bar> cwindow<CR>

" Tree style for Explore
"let g:netrw_liststyle = 3  " 3 for tree, 2 for horizontal list

"--------------------------------------------------------------------------
" Plugin configuration
"--------------------------------------------------------------------------

let g:load_doxygen_syntax = 1

function! AirlineInit()
    let g:airline_detect_spell = 0
    let g:airline_powerline_fonts = 1
    let g:airline_skip_empty_sections = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_tab_type = 0
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#syntastic#enabled = 1
    let g:airline#extensions#whitespace#show_message = 1

    " For regular fonts only
    "let g:airline_powerline_fonts = 0
    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    " unicode symbols
    let g:airline_left_sep = '¬ª'
    let g:airline_left_sep = '‚ñ∂'
    let g:airline_right_sep = '¬´'
    let g:airline_right_sep = '‚óÄ'

    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.linenr = '‚ò∞'
    let g:airline_symbols.linenr = '‚êä'
    let g:airline_symbols.linenr = '‚ê§'
    let g:airline_symbols.linenr = '¬∂'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.maxlinenr = '„èë'
    let g:airline_symbols.branch = '‚éá'
    let g:airline_symbols.paste = 'œÅ'
    let g:airline_symbols.paste = '√û'
    let g:airline_symbols.paste = '‚à•'
    let g:airline_symbols.spell = 'Íû®'
    let g:airline_symbols.notexists = '‚àÑ'
    let g:airline_symbols.whitespace = 'Œû'

    " powerline symbols
    let g:airline_left_sep = 'ÓÇ∞'
    let g:airline_left_alt_sep = 'ÓÇ±'
    let g:airline_right_sep = 'ÓÇ≤'
    let g:airline_right_alt_sep = 'ÓÇ≥'
    let g:airline_symbols.branch = 'ÓÇ†'
    let g:airline_symbols.readonly = 'ÓÇ¢'
    let g:airline_symbols.linenr = '‚ò∞'
    let g:airline_symbols.maxlinenr = 'ÓÇ°'

    if !exists('g:airline_mode_map')
      let g:airline_mode_map = {}
    endif

    let g:airline_mode_map = {
        \ '__' : '-',
        \ 'n'  : 'N',
        \ 'i'  : 'I',
        \ 'R'  : 'R',
        \ 'c'  : 'C',
        \ 'v'  : 'V',
        \ 'V'  : 'V',
        \ '' : 'V',
        \ 's'  : 'S',
        \ 'S'  : 'S',
        \ '' : 'S',
        \ }
endfunction
autocmd VimEnter * call AirlineInit()

let g:syntastic_c_remove_include_errors = 1
let g:syntastic_c_no_include_search = 1

let g:gitgutter_max_signs = 2000

"map <Leader> <Plug>(easymotion-prefix)
"map  / <Plug>(easymotion-sn)
"omap / <Plug>(easymotion-tn)
""map  n <Plug>(easymotion-next)
""map  N <Plug>(easymotion-prev)

""nmap s <Plug>(easymotion-overwin-f2)
"let g:EasyMotion_smartcase = 1
""map <Leader>j <Plug>(easymotion-j)
""map <Leader>k <Plug>(easymotion-k)

let Tlist_Use_Right_Window = 1

syntax enable
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
else
    set background=dark
    colorscheme base16-material-darker
endif

"--------------------------------------------------------------------------
" Tools
"--------------------------------------------------------------------------
if &diff
    syntax off
    set nospell
endif

" <F7> formats current file
map <F7> mzgg=G`z

:autocmd FileType c set formatprg=astyle\ -A10s4pUHk3z2W3j
:autocmd FileType cpp set formatprg=astyle\ -A10s4pUHk3z2W3j
:autocmd FileType php set formatprg=astyle\ -A10s4pUHk3z2W3j
:autocmd FileType java set formatprg=astyle\ --mode=java
:autocmd FileType cs set formatprg=astyle\ --mode=cs

function! Format()
    silent! execute 'norm! mz'
    " Formatting depends on `formatprg' vaiable set when setting 'FileType'
    silent! execute 'norm! gggqG'
    silent! call RemoveTrailingSpaces()
    silent! execute 'retab'
    silent! execute 'gg=G'
    silent! execute 'norm! `z'
    set formatprg=
endfunction

function! RemoveTrailingSpaces()
    silent! execute '%s/\s\+$//ge'
    silent! execute 'g/\v^$\n*%$/norm! dd'
endfunction

"#############################################################################
" GUI settings (.gvimrc)
"#############################################################################
if has("gui_running")
    if has("gui_gtk2") || has("gui_gtk3")
        "set guifont=Meslo\ LG\ S\ DZ\ 13
        "set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline\ 11
        "set guifont=Bistream\ Vera\ Sans\ Mono\ 11
        "set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 11
        "set guifont=DejaVu\ Sans\ Mono\ 11
        set guifont=Monospace\ 11
        set printfont=Monospace\ 11
        "set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 11
        "set guifont=DejaVu\ Sans\ Mono\ 8
        "set guifont=Monospace\ 8
    elseif has("gui_win32")
        "set guifont=Fira_Mono_for_Powerline:h9:cANSI
        "set guifont=Sauce_Code_Powerline:h9:cANSI
        "set guifont=Menlo_for_PowerLine:h10:cANSI
        set guifont=Droid_Sans_Mono_Slashed_for_Pow:h8:cANSI
        "set guifont=Droid_Sans_Mono:h10:cANSI
        "set guifont=Consolas:h11:cANSI
        set printfont=Consolas:h10:cANSI
    endif

    set colorcolumn=80

    if &diff
        set lines=50 columns=200
    else
        set lines=50 columns=100
    endif

    " vertical space between text lines.
    set linespace=0

    set guioptions-=b
    set guioptions-=m
    set guioptions-=T

    " Toggle Menu and Toolbar
    map <silent> <F11> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=m <Bar>
        \set guioptions-=T <Bar>
        \else <Bar>
        \set guioptions+=m <Bar>
        \set guioptions+=T <Bar>
        \endif<CR>
endif


"#############################################################################
" Syntax highlight for custom file extensions
"#############################################################################
au BufNewFile,BufRead *.lds set filetype=ld
