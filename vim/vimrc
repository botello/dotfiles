"#############################################################################
" .vimrc
" Author: botello <botello@gmail.com>
" Source: https://github.com/botello/dotfiles
"#############################################################################

"--------------------------------------------------------------------------
" General settings
"--------------------------------------------------------------------------
"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
set nocompatible
set hidden
"behave mswin
filetype off
set t_BE=

"--------------------------------------------------------------------------
" Fixes for specific terminals
"--------------------------------------------------------------------------
if
    \$COLORTERM == 'gnome-terminal' ||
    \$COLORTERM == 'xfce4-terminal' ||
    \$TERM == 'xterm-256color'
    set t_Co=256
    "set t_AB=^[[48;5;%dm
    "set t_AF=^[[38;5;%dm
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

"--------------------------------------------------------------------------
" Vundle
"--------------------------------------------------------------------------
set rtp+=$HOME/dotfiles/vim/bundle/Vundle.vim/
let $GIT_SSL_NO_VERIFY = 'true'

call vundle#begin('$HOME/dotfiles/vim/bundle')

Plugin 'VundleVim/Vundle.vim'

" Appeareance plugins
Plugin 'chriskempson/base16-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Behaviour plugins
Plugin 'ervandew/supertab'
Plugin 'vim-scripts/star-search'
Plugin 'godlygeek/tabular'

" Syntax plugins
Plugin 'vhda/verilog_systemverilog.vim'
"Plugin 'vim-scripts/systemrdl.vim'
"Plugin 'tpope/vim-markdown'

call vundle#end()

filetype plugin indent on
"set autoindent  " always set autoindenting on

" Built-in match-it plugin
packadd! matchit

"--------------------------------------------------------------------------
" Settings
"--------------------------------------------------------------------------
set path+=.,**
set encoding=utf-8
set fileformats=unix,dos,mac
set laststatus=2
set showtabline=2
set cmdheight=2
set autochdir
set history=1000
set shortmess=atI
set report=0
set showcmd
set completeopt=longest,menu " for omnipotent

set nonumber
set ruler
set nowrap
set linebreak
set breakindent
set hlsearch incsearch ignorecase smartcase
set backspace=indent,eol,start  " same as 2

" Use <C-l> to clear the highlighting of :set hlsearch.
"if maparg('<C-l>', 'n') ==# ''
"  nnoremap <silent> <C-l> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-l>
"endif

"set nolazyredraw

set wildmenu
set wildmode=list:longest,full
set wildignore=.svn,CVS,.git,.hg,*.o,*.so,*.obj,*.swp,*.jpg,*.png,*.gif
set wildignore+=*/.git/**/*,*/.hg/**/*,*/**.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*
set wildignorecase


if !&scrolloff
  set scrolloff=10
endif
if !&sidescrolloff
  set sidescrolloff=10
endif
set display+=lastline

syntax enable

" Folding
"set foldmethod=marker
"set foldmethod=indent
set foldmethod=syntax
set foldlevel=0
set foldnestmax=6
set foldlevelstart=20
set foldcolumn=2
set nofoldenable

"nnoremap <space> za
"vnoremap <space> zf

set backspace=indent,eol,start  " same as 2
"Make Backspace and Delete to work everywhere
inoremap  <c-h>
cnoremap  <c-h>


" Spaces instead of tabs
let tabsize=3
execute "set tabstop=".tabsize
execute "set shiftwidth=".tabsize
execute "set softtabstop=".tabsize
set expandtab

" Max syntax column for loooong lines
"set synmaxcol=300
set colorcolumn=80
"set textwidth=78  " auto break lines

" Enable spelling
set nospell spelllang=en_us
set complete+=kspell

if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif


" Tag file location
"if has('path_extra')
"  setglobal tags-=./tags tags-=./tags; tags^=./tags;
"endif

" Remember cursor position between vim sessions
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Highlight trailing spaces
match Visual "\s\+$"

" Trailing whitespace
set nolist
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    autocmd!
    autocmd InsertEnter * execute "set list"
    autocmd InsertLeave * execute "set nolist"
augroup END

" Only show cursorline in the current window and in normal mode.
augroup cline
    autocmd!
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * set cursorline
    autocmd InsertEnter * set nocursorline
    autocmd InsertLeave * set cursorline
augroup END
set cursorline

" Hide quickfix window from buffer list, close on <CR>
augroup qf
   autocmd!
   autocmd FileType qf set nobuflisted
   autocmd FileType qf nnoremap <buffer> <CR> <CR>:cclose<CR>
augroup END

" Jump to buffer
nnoremap <silent> gb :ls<CR>:buffer<SPACE>

" Maping next/prev buffer to <TAB> and <SHIFT-TAB> key in cmd mode
"nnoremap <silent> <Tab> :bnext<cr>
"nnoremap <silent> <S-Tab> :bprev<cr>
nnoremap <silent> <C-h> :bprev<cr>
nnoremap <silent> <C-l> :bnext<cr>

" Maping next/prev buffer to <ALT-l> and <ALT-h> key in cmd mode
" To capture the correct key code, in <INSERT> mode, C-v, A-h --> ^[h
"execute "set <A-h>=\eh"
"execute "set <A-l>=\el"
"execute "set <A-h>=h"
"execute "set <A-l>=l"
"nnoremap <silent> <A-h> :bprev<cr>
"nnoremap <silent> <A-l> :bnext<cr>

" Disable backup file, enable read modified files
set nobackup nowarn noswapfile autoread

" Disable all sounds and visual bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Smarter j and k navigation. Display line movements unless
" preceded by a count
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Grepping
if executable("ag")
  set grepprg=ag\ --vimgrep
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif
"nnoremap <F3> :execute "grep ".expand("<cword>") <BAR> cwindow<CR>
"nnoremap <F3> :execute "grep -srnwI --exclude-dir=.git --exclude=tags . -e " . expand("<cword>") . " " <bar> cwindow<CR>
nnoremap <F3> :grep! "\b<C-R><C-W>\b"<CR> :cw<CR>

let g:netrw_banner=0        " disable banner
let g:netrw_browse_split=0  " open file in: same window, hsplit, vsplit, tab, prev win
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " 3 for tree, 2 for horizontal list
let g:netrw_winsize=20      " use 20% of window
let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
autocmd FileType netrw setl bufhidden=wipe

"--------------------------------------------------------------------------
" Plugin configuration
"--------------------------------------------------------------------------

""" 'ervandew/supertab'
"let g:SuperTabCrMapping = 1
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabContextDefaultCompletionType = "<c-n>"
"let g:SuperTabDefaultCompletionType = "<c-n>"


""" 'vim-airline/vim-airline'
let g:airline_powerline_fonts = 1

if (g:airline_powerline_fonts == 1)
  set showbreak=Â»\ Â»\ 
  set listchars=eol:Â¶,tab:Â»Â·,trail:Â·,extends:Â»,precedes:Â«
else
  set showbreak=>\ >\ 
  set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
endif

let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#ignore_bufadd_pat =
  \ 'gundo|undotree|vimfiler|tagbar|nerd_tree|startify|!'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

function! AirlineInit()
    "let g:airline_detect_spell = 0
    "let g:airline#extensions#tabline#fnamemod = ':t'
    "let g:airline#extensions#tabline#show_tab_type = 1
    "let g:airline#extensions#syntastic#enabled = 1
    "let g:airline#extensions#whitespace#enabled = 0
    "let g:airline#extensions#whitespace#show_message = 1
    if !exists('g:airline_mode_map')
        let g:airline_mode_map = {}
    endif

    let g:airline_mode_map = {
        \ '__' : '-',
        \ 'n'  : 'N',
        \ 'i'  : 'I',
        \ 'R'  : 'R',
        \ 'c'  : 'C',
        \ 'v'  : 'V',
        \ 'V'  : 'V',
        \ '' : 'V',
        \ 's'  : 'S',
        \ 'S'  : 'S',
        \ '' : 'S',
        \ }

    " For more symbols refer to :help airline-customization
    if (g:airline_powerline_fonts == 1)
        " For regular fonts only
        if !exists('g:airline_symbols')
          let g:airline_symbols = {}
        endif

        " powerline symbols
        let g:airline_left_sep          = 'î‚°'
        let g:airline_left_alt_sep      = 'î‚±'
        let g:airline_right_sep         = 'î‚²'
        let g:airline_right_alt_sep     = 'î‚³'
        "let g:airline_symbols.linenr    = 'â˜°'
        let g:airline_symbols.branch    = 'î‚ '
        let g:airline_symbols.readonly  = 'î‚¢'
        let g:airline_symbols.maxlinenr = 'î‚¡'
        let g:airline_symbols.paste     = 'Ãž'
    else
        " For regular fonts only
        if !exists('g:airline_symbols')
          let g:airline_symbols = {}
        endif

        " ascii symbols
        let g:airline_left_sep = ' '
        let g:airline_left_alt_sep = '|'
        let g:airline_right_sep = ' '
        let g:airline_right_alt_sep = '|'
        let g:airline_symbols.linenr = ''
        let g:airline_symbols.branch = 'Y'
        let g:airline_symbols.readonly = 'RO'
        let g:airline_symbols.maxlinenr = ''
    endif
endfunction
autocmd VimEnter * call AirlineInit()


""" 'chriskempson/base16-vim'
if !exists('g:colors_name') || g:colors_name != 'base16-monokai'
  let base16colorspace=256  " Access colors present in 256 colorspace
  colorscheme base16-monokai
endif

"--------------------------------------------------------------------------
" Tools
"--------------------------------------------------------------------------
if &diff
   syntax off
   set nospell
endif

""Plugin 'godlygeek/tabular'
nnoremap <silent> <leader>t :Tabularize /[()=]/l2l1l1l0<CR>
xnoremap <silent> <leader>t :Tabularize /[()=]/l2l1l1l0<CR>

" Drag visual blocks
vnoremap <C-l> xpgvlolo
vnoremap <C-h> xhPgvhoho
vnoremap <C-j> xjPgvjojo
vnoremap <C-k> xkPgvkoko

" <F7> formats current file
"map <F7> mzgg=G`z
map <F7> mzgggqG`z

:autocmd FileType c set formatprg=astyle\ -A10s4pUHk3z2W3j
:autocmd FileType cpp set formatprg=astyle\ -A10s4pUHk3z2W3j
:autocmd FileType php set formatprg=astyle\ -A10s4pUHk3z2W3j
:autocmd FileType java set formatprg=astyle\ --mode=java
:autocmd FileType cs set formatprg=astyle\ --mode=cs

function! Format()
    silent! execute 'norm! mz'
    " Formatting depends on `formatprg' vaiable set when setting 'FileType'
    silent! execute 'norm! gggqG'
    silent! call RemoveTrailingSpaces()
    silent! execute 'retab'
    silent! execute 'gg=G'
    silent! execute 'norm! `z'
    set formatprg=
endfunction

function! RemoveTrailingSpaces()
    silent! execute '%s/\s\+$//ge'
    silent! execute 'g/\v^$\n*%$/norm! dd'
endfunction
command RemoveTrailingSpaces call RemoveTrailingSpaces()

"#############################################################################
" GUI settings (.gvimrc)
"#############################################################################
if has("gui_running")
    if has("gui_gtk2") || has("gui_gtk3")
        let g:airline_powerline_fonts = 1
        "set guifont=Meslo\ LG\ S\ DZ\ 13
        "set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline\ 11
        "set guifont=Bistream\ Vera\ Sans\ Mono\ 11
        "set guifont=Source\ Code\ Pro\ for\ Powerline\ 9
        "set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 11
        "set guifont=DejaVu\ Sans\ Mono\ 11
        set guifont=TamzenForPowerline\ 9
        "set guifont=Monospace\ 8
        "set printfont=Monospace\ 8
        "set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 11
        "set guifont=DejaVu\ Sans\ Mono\ 8
        "set guifont=Monospace\ 8
    elseif has("gui_win32")
        "set guifont=Fira_Mono_for_Powerline:h9:cANSI
        "set guifont=Sauce_Code_Powerline:h9:cANSI
        "set guifont=Menlo_for_PowerLine:h10:cANSI
        set guifont=Droid_Sans_Mono_Slashed_for_Pow:h8:cANSI
        "set guifont=Droid_Sans_Mono:h10:cANSI
        "set guifont=Consolas:h11:cANSI
        set printfont=Consolas:h10:cANSI
    endif

    if &diff
        set lines=50 columns=200
    else
        set lines=50 columns=100
    endif

    " vertical space between text lines.
    set linespace=-1

    " Remove top menus and toolbars by default
    set guioptions-=b
    set guioptions-=m
    set guioptions-=T

    " Toggle Menu and Toolbar
    map <silent> <F11> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=m <Bar>
        \set guioptions-=T <Bar>
        \else <Bar>
        \set guioptions+=m <Bar>
        \set guioptions+=T <Bar>
        \endif<CR>
endif


"#############################################################################
" Syntax highlight for custom file extensions
"#############################################################################
au BufNewFile,BufRead *.lds  set filetype=ld
au BufNewFile,BufRead *.rdl  set filetype=systemrdl
"au BufNewFile,BufRead *.tcfg set filetype=perl

