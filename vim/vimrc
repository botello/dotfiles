"#############################################################################
" .vimrc
" Author: botello <botello@gmail.com>
" Source: https://github.com/botello/dotfiles
"#############################################################################

"-----------------------------------------------------------------------------
" General settings
"-----------------------------------------------------------------------------
source $VIMRUNTIME/mswin.vim
set nocompatible
behave mswin
filetype off

"-----------------------------------------------------------------------------
" Vundle
"-----------------------------------------------------------------------------
set rtp+=$HOME/.dotfiles/vim/
set rtp+=$HOME/.dotfiles/vim/vimfiles/
set rtp+=$HOME/.dotfiles/vim/bundle/Vundle.vim/
let $GIT_SSL_NO_VERIFY = 'true'
call vundle#begin('$HOME/.dotfiles/vim/bundle')

" Basics
Plugin 'VundleVim/Vundle.vim'
Plugin 'bling/vim-airline'

Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'ervandew/supertab'
Plugin 'kien/ctrlp.vim'
Plugin 'thinca/vim-fontzoom'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'https://github.com/Shougo/neocomplcache.git'
Plugin 'bling/vim-bufferline'

" Meta code helpers
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/syntastic'

" Python
"Plugin 'nvie/vim-flake8'
Plugin 'elzr/vim-json'
"Plugin 'python.vim'
Plugin 'klen/python-mode'
"Plugin 'timheap/linters.vim'
"Plugin 'davidhalter/jedi-vim'
Plugin 'fatih/vim-go'

" Color schemes
Plugin 'gmarik/ingretu'
Plugin 'tristen/superman'
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'

" Syntax files
"Plugin 'tpope/vim-markdown'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'Glench/Vim-Jinja2-Syntax'

" Javascript
"Plugin 'wookiehangover/jshint.vim'

call vundle#end()
filetype plugin indent on

"-----------------------------------------------------------------------------
" Settings
"-----------------------------------------------------------------------------
set encoding=utf-8 fileformats=unix,dos,mac
set laststatus=2 cmdheight=2
set backspace=2
set autochdir history=1000
set shortmess=atI report=0 showcmd hidden
set completeopt=longest,menu " for omnipotent

set lines=50 columns=100
set number colorcolumn=+2
"set textwidth=78  " auto break lines
set nowrap linebreak
set hlsearch incsearch ignorecase smartcase
set nolazyredraw
set scrolloff=4
set wildignore=.svn,CVS,.git,.hg,*.o,*.so,*.obj,*.swp,*.jpg,*.png,*.gif
set wildmenu
set wildmode=list:longest,full

" Folding
"set foldmethod=marker
set foldmethod=indent
set foldlevel=0
set foldnestmax=6
set foldlevelstart=20
set foldcolumn=2
set nofoldenable

nnoremap <space> za
vnoremap <space> zf

" Spaces instead of tabs
let tabsize=2
execute "set tabstop=".tabsize
execute "set shiftwidth=".tabsize
execute "set softtabstop=".tabsize
set expandtab

" Enable spelling
set spell spelllang=en_us

" Remember cursor position between vim sessions
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Trailing whitespace
set nolist
set listchars=tab:»·,trail:·,extends:»,precedes:«,eol:¶
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * execute "set list"
    au InsertLeave * execute "set nolist"
augroup END

" Only show cursorline in the current window and in normal mode.
augroup cline
au!
    au WinLeave * set nocursorcolumn
    au WinEnter * set cursorcolun
    au InsertEnter * set nocursorcolumn
    au InsertLeave * set cursorcolumn
    au WinLeave * set nocursorline
    au WinEnter * set cursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
augroup END

" Maping next/prev buffer to <TAB> and <SHIFT-TAB> key in cmd mode
nnoremap <silent> <tab> :bnext<cr>
nnoremap <silent> <s-tab> :bprev<cr>

" Disable backup file, enable read modified files
set nobackup nowarn nowritebackup noswapfile
set autoread

" Disable all sounds and visual bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

"set diffexpr=MyDiff()
"function MyDiff()
"    let opt = '-a --binary '
"    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
"    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
"    let arg1 = v:fname_in
"    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
"    let arg2 = v:fname_ne:e
"    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
"    let arg3 = v:fname_out
"    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
"    let eq = ''
"    if $VIMRUNTIME =~ ' '
"        if &sh =~ '\<cmd'
"            let cmd = '""' . $VIMRUNTIME . '\diff"'
"            let eq = '"'
"        else
"            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
"        endif
"    else
"        let cmd = $VIMRUNTIME . '\diff'
"    endif
"    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
"endfunction

"--------------------------------------------------------------------------
" Plugin configuration
"--------------------------------------------------------------------------

let g:airline_powerline_fonts = 1

if !exists('g:airline_loaded')
   set statusline=
   set statusline +=%1*\ %n\ %*   "buffer number
   set statusline +=%4*\ %<%F%*   "full path
   set statusline +=%5*%{&ff}%*   "file format
   set statusline +=%3*%y%*       "file type
   set statusline +=%2*%m%*       "modified flag
   set statusline +=%1*%=%5l%*    "current line
   set statusline +=%2*/%L%*      "total lines
   set statusline +=%1*%4v\ %*    "virtual column number
   set statusline +=%2*0x%04B\ %* "character under cursor

   hi User1 guifg=#eea040 guibg=#222222
   hi User2 guifg=#dd3333 guibg=#222222
   hi User3 guifg=#ff66ff guibg=#222222
   hi User4 guifg=#a0ee40 guibg=#222222
   hi User5 guifg=#eeee40 guibg=#222222
endif

" Plugin: Python-mode
"let g:pymode = 1
"let g:pymode_trim_whitespaces = 1
"let g:pymode_options = 1

" Plugin: Syntastic
let g:sytastic_python_checkers=["flake8", "pyflakes", "pep8", "pylint", "python"]

" Plugin: jedi-vim
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#use_splits_not_buffers = "left"

" Plugin: FontZoom
silent! nmap <unique> <silent> <C-kPlus> <Plug>(fontzoom-larger)
silent! nmap <unique> <silent> <C-kMinus> <Plug>(fontzoom-smaller)

" Plugin: NERDTree
silent! nnoremap <silent> <F12> :NERDTreeToggle<cr>

" Plugin: Tagbar
silent! nnoremap <silent> <F9> :TagbarToggle<cr>

" common colors are:
"  ir_black, solarized, blackboard, molokai, superman, ingretu,
"  base16-default, base16-monokai, base16-solarized
let scheme="base16-default"

syntax enable
set background=dark

" Must be set BEFORE calling `set colorscheme solarized`
if scheme == "solarized"
    " Color Scheme: Solarized
    " altercation/vim-colors-solarized
    let g:solarized_contrast="high"
    let g:solarized_visibility="high"
    let g:solarized_italic=0
    let g:solarized_hitrail=1
    let g:solarized_termtrans=1
    let g:solarized_termcolors=256
    call togglebg#map("<F5>")
endif

execute "silent! colorscheme ".scheme


"#############################################################################
" GUI settings
"#############################################################################
if has("gui_running")
    if has("gui_gtk2")
        set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline\ 13
        set printfont=Droid\ Sans\ Mono\ 10
    elseif has("gui_win32")
        "set guifont=Fira_Mono:h10:cANSI
        "set guifont=M+_2m_regular:h10:cANSI
        set guifont=Sauce_Code_Powerline:h9:cANSI
        "set guifont=Menlo_for_PowerLine:h10:cANSI
        "set guifont=Droid_Sans_Mono_Slashed_for_Pow:h10:cANSI
        "set guifont=Droid_Sans_Mono:h10:cANSI
        "set guifont=Consolas:h11:cANSI
        set printfont=Consolas:h10:cANSI
    endif

    set linespace=0   " vertical space between text lines.

    set guioptions-=b
    set guioptions-=m
    set guioptions-=T

    " Toggle Menu and Toolbar
    map <silent> <F11> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=m <Bar>
        \set guioptions-=T <Bar>
    \else <Bar>
        \set guioptions+=m <Bar>
        \set guioptions+=T <Bar>
    \endif<CR>

    " Search for (visual) selected text using mapped '*' and '#'.
    vnoremap <silent> * :<C-U>
        \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
        \gvy/<C-R><C-R>=substitute(
            \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
        \gV:call setreg('"', old_reg, old_regtype)<CR>
    vnoremap <silent> # :<C-U>
        \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
        \gvy?<C-R><C-R>=substitute(
            \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
        \gV:call setreg('"', old_reg, old_regtype)<CR>

    " Highlight trailing spaces
    "match Visual "\s\+$"

endif

